plotOutput("barplot")
)
)
)
# Server
server <- function(input, output, session) {
# Load data
# Assuming 'netflix_movies' is your dataframe
# Filter data for the year 2020
netflix_movies_2020 <- filter(netflix_movies, release_year == 2020)
# Count the occurrences of each director for the year 2020
director_counts_2020 <- count(netflix_movies_2020, director, sort = TRUE)
# Plot the top directors with the most movies on Netflix for 2020
output$barplot <- renderPlot({
ggplot(head(director_counts_2020, 10), aes(x = reorder(director, n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top Directors with the Most Movies on Netflix (2020)",
x = "Director",
y = "Number of Movies") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_flip()  # Flip the coordinates for horizontal bars
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Top 10 Directors with the Most Movies on Netflix"),
sidebarLayout(
sidebarPanel(),
mainPanel(
plotOutput("barplot")
)
)
)
# Server
server <- function(input, output, session) {
# Load data
# Assuming 'netflix_movies' is your dataframe
# Filter data for the year 2020
netflix_movies_2020 <- filter(netflix_movies, release_year == 2020)
# Count the occurrences of each director for the year 2020
director_counts_2020 <- count(netflix_movies_2020, director, sort = TRUE)
# Plot the top directors with the most movies on Netflix for 2020
output$barplot <- renderPlot({
ggplot(head(director_counts_2020, 10), aes(x = reorder(director, n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top Directors with the Most Movies on Netflix (2020)",
x = "Director",
y = "Number of Movies") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_flip()  # Flip the coordinates for horizontal bars
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Top 10 Directors with the Most Movies on Netflix"),
sidebarLayout(
sidebarPanel(disable = T),
mainPanel(
plotOutput("barplot")
)
)
)
# Server
server <- function(input, output, session) {
# Load data
# Assuming 'netflix_movies' is your dataframe
# Filter data for the year 2020
netflix_movies_2020 <- filter(netflix_movies, release_year == 2020)
# Count the occurrences of each director for the year 2020
director_counts_2020 <- count(netflix_movies_2020, director, sort = TRUE)
# Plot the top directors with the most movies on Netflix for 2020
output$barplot <- renderPlot({
ggplot(head(director_counts_2020, 10), aes(x = reorder(director, n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top Directors with the Most Movies on Netflix (2020)",
x = "Director",
y = "Number of Movies") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_flip()  # Flip the coordinates for horizontal bars
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Top 10 Directors with the Most Movies on Netflix"),
sidebarLayout(
sidebarPanel(disable = T),
mainPanel(
plotOutput("barplot")
)
)
)
# Server
server <- function(input, output, session) {
# Load data
# Assuming 'netflix_movies' is your dataframe
# Filter data for the year 2020
netflix_movies_2020 <- filter(netflix_movies, release_year == 2020)
# Count the occurrences of each director for the year 2020
director_counts_2020 <- count(netflix_movies_2020, director, sort = TRUE)
# Plot the top directors with the most movies on Netflix for 2020
output$barplot <- renderPlot({
ggplot(head(director_counts_2020, 10), aes(x = reorder(director, n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top Directors with the Most Movies on Netflix (2020)",
x = "Director",
y = "Number of Movies") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Top Directors with the Most Movies on Netflix"),
sidebarLayout(
sidebarPanel(
selectInput("year", "Select Year", choices = unique(netflix_movies$release_year))
),
mainPanel(
plotOutput("barplot")
)
)
)
# Server
server <- function(input, output) {
# Filter data based on selected year
selected_data <- reactive({
filter(netflix_movies, release_year == input$year)
})
# Count the occurrences of each director based on selected year
director_counts <- reactive({
count(selected_data(), director, sort = TRUE)
})
# Plot the top directors with the most movies based on selected year
output$barplot <- renderPlot({
ggplot(head(director_counts(), 10), aes(x = reorder(director, n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = paste("Top Directors with the Most Movies on Netflix (", input$year, ")"),
x = "Director",
y = "Number of Movies") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Top Directors with the Most Movies on Netflix"),
sidebarLayout(
sidebarPanel(
selectInput("year", "Select Year", choices = unique(netflix_movies$release_year))
),
mainPanel(
plotOutput("barplot")
)
)
)
# Server
server <- function(input, output) {
# Filter data based on selected year
selected_data <- reactive({
filter(netflix_movies, release_year == input$year)
})
# Count the occurrences of each director based on selected year
director_counts <- reactive({
count(selected_data(), director, sort = TRUE)
})
# Plot the top directors with the most movies based on selected year
output$barplot <- renderPlot({
ggplot(head(director_counts(), 10), aes(x = reorder(director, n), y = n)) +
geom_bar(stat = "identity", fill = "purple") +
labs(title = paste("Top Directors with the Most Movies on Netflix (", input$year, ")"),
x = "Director",
y = "Number of Movies") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Top Directors with the Most Movies on Netflix"),
sidebarLayout(
sidebarPanel(
selectInput("year", "Select Year", choices = unique(netflix_movies$release_year))
),
mainPanel(
plotOutput("barplot")
)
)
)
# Server
server <- function(input, output) {
# Filter data based on selected year
selected_data <- reactive({
filter(netflix_movies, release_year == input$year)
})
# Count the occurrences of each director based on selected year
director_counts <- reactive({
count(selected_data(), director, sort = TRUE)
})
# Plot the top directors with the most movies based on selected year
output$barplot <- renderPlot({
ggplot(head(director_counts(), 10), aes(x = reorder(director, n), y = n)) +
geom_bar(stat = "identity", fill = "purple", alpha = 0.8) +
labs(title = paste("Top Directors with the Most Movies on Netflix (", input$year, ")"),
x = "Director",
y = "Number of Movies") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(dplyr)
blood_count <- read_csv("data/blood_count.csv")
blood_count <- read_csv("data/blood_count_dataset.csv")
glmpse(blood_count)
glimpse(blood_count)
blood_count %>%
group_by(gender) %>%
summarize(min=min(red_blood_cells)
mean=maen(red_blood_cells),
blood_count %>%
group_by(gender) %>%
summarize(min=min(red_blood_cells)
mean=maen(red_blood_cells)
blood_count %>%
group_by(gender) %>%
summarize(min = min(red_blood_cells),
mean = mean(red_blood_cells),
max = max(red_blood_cells))
View(blood_count)
blood_count %>%
group_by(Gender) %>%
summarize(min = min(red_blood_cells),
mean = mean(red_blood_cells),
max = max(red_blood_cells))
blood_count <- read_csv("data/blood_count_dataset.csv") %>% clean_names()
glimpse(blood_count)
blood_count %>%
group_by(gender) %>%
summarize(min = min(red_blood_cells),
mean = mean(red_blood_cells),
max = max(red_blood_cells))
options(scipen = 999, digits = 2)
blood_count %>%
filter(Gender = "male") %>%
select[3:9] %>%
colMeans(na.rm = TRUE)
options(scipen = 999, digits = 2)
blood_count %>%
filter(gender == "male") %>%
select[3:9] %>%
colMeans(na.rm = TRUE)
options(scipen = 999, digits = 2)
blood_count %>%
filter(gender == "male") %>%
select(3:9) %>%
colMeans(na.rm = TRUE)
bloood_count %>%
filter(Gender = "Female") />%
bloood_count %>%
filter(Gender = "Female") %>%
select[3:9] %>%
colMeans(na.rm = T)
blood_count %>%
filter(Gender = "Female") %>%
select[3:9] %>%
colMeans(na.rm = T)
blood_count %>%
filter(gender = "Female") %>%
select[3:9] %>%
colMeans(na.rm = T)
blood_count %>%
filter(gender = "Female") %>%
select(3:9) %>%
colMeans(na.rm = T)
blood_count %>%
filter(gender == "Female") %>%
select(3:9) %>%
colMeans(na.rm = T)
blood_count %>%
pivot_wider(cols = [3:9], names_to = "Test", values_to = "Values") %>%
blood_count %>%
pivot_wider(names_from = Gender, values_from = 3:9) %>%
pivot_longer(cols = -Test, names_to = "Gender", values_to = "Values") %>%
ggplot(aes(x = gender, y = Values, fill = gender)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free") +
labs(title = "Boxplot of Blood Count Tests",
x = "Test",
y = "Values")
blood_count %>%
pivot_wider(names_from = gender, values_from = 3:9) %>%
pivot_longer(cols = -Test, names_to = "Gender", values_to = "Values") %>%
ggplot(aes(x = gender, y = Values, fill = gender)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free") +
labs(title = "Boxplot of Blood Count Tests",
x = "Test",
y = "Values")
blood_count %>%
pivot_wider(names_from = gender, values_from = 3:9) %>%
mutate(Test = rownames(.)) %>%
pivot_longer(cols = -Test, names_to = "Gender", values_to = "Values") %>%
ggplot(aes(x = Gender, y = Values, fill = Gender)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free") +
labs(title = "Boxplot of Blood Count Tests",
x = "Gender",
y = "Values")
blood_count %>%
pivot_wider(names_from = gender, values_from = 3:9) %>%
mutate(Test = rownames(.)) %>%
pivot_longer(cols = -Test, names_to = "Gender", values_to = "Values") %>%
ggplot(aes(x = gender, y = Values, fill = gender)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free") +
labs(title = "Boxplot of Blood Count Tests",
x = "Gender",
y = "Values")
blood_count %>%
pivot_wider(names_from = gender, values_from = 3:9, values_fn = list) %>%
mutate(Test = rownames(.)) %>%
pivot_longer(cols = -Test, names_to = "Gender", values_to = "Values") %>%
ggplot(aes(x = gender, y = Values, fill = gender)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free") +
labs(title = "Boxplot of Blood Count Tests",
x = "Gender",
y = "Values")
blood_count %>%
pivot_wider(names_from = gender, values_from = 3:9, values_fn = list) %>%
mutate(Test = rownames(.)) %>%
unnest(cols = c(starts_with("male"), starts_with("female"))) %>%
pivot_longer(cols = -Test, names_to = "Gender", values_to = "Values") %>%
ggplot(aes(x =gender, y = Values, fill = gender)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free") +
labs(title = "Boxplot of Blood Count Tests",
x = "Gender",
y = "Values")
blood_count %>%
pivot_wider(names_from = gender, values_from = 3:9, values_fn = list) %>%
mutate(Test = rownames(.)) %>%
unnest(cols = c(starts_with("male"), starts_with("female"))) %>%
mutate(across(where(is.character), as.numeric)) %>%
pivot_longer(cols = -Test, names_to = "Gender", values_to = "Values") %>%
ggplot(aes(x = gender, y = Values, fill = gender)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free") +
labs(title = "Boxplot of Blood Count Tests",
x = "Gender",
y = "Values")
blood_count %>%
pivot_wider(names_from = gender, values_from = 3:9, values_fn = list) %>%
mutate(Test = rownames(.)) %>%
unnest(cols = c(starts_with("male"), starts_with("female"))) %>%
mutate(across(where(is.character), as.numeric)) %>%
select(-Test) %>%
glimpse()
blood_count %>%
pivot_wider(names_from = gender, values_from = 3:9, values_fn = list) %>%
mutate(Test = rownames(.)) %>%
unnest_longer(c(starts_with("male"), starts_with("female")), names_sep = "_") %>%
mutate(across(where(is.character), as.numeric)) %>%
pivot_longer(cols = -Test, names_to = "Gender", values_to = "Values") %>%
ggplot(aes(x = gender, y = Values, fill = gender)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free") +
labs(title = "Boxplot of Blood Count Tests",
x = "Gender",
y = "Values")
blood_count %>%
pivot_wider(names_from = gender, values_from = 3:9, values_fn = list) %>%
mutate(Test = rownames(.)) %>%
unnest_wider(c(starts_with("male"), starts_with("female"))) %>%
mutate(across(where(is.character), as.numeric)) %>%
pivot_longer(cols = -Test, names_to = "Gender", values_to = "Values") %>%
ggplot(aes(x = gender, y = Values, fill = gender)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free") +
labs(title = "Boxplot of Blood Count Tests",
x = "Gender",
y = "Values")
male_data <- blood_count %>%
select(-starts_with("female")) %>%
pivot_longer(cols = starts_with("male"), names_to = "Test", values_to = "Values")
male_data <- blood_count %>%
select(age, starts_with("male")) %>%
pivot_longer(cols = -age, names_to = "Test", values_to = "Values")
male_data <- blood_count %>%
pivot_longer(cols = starts_with("hemoglobin_Male"):ends_with("_Male"),
names_to = "Test", values_to = "Values")
male_columns <- grep("_Male$", names(blood_count))
female_columns <- grep("_Female$", names(blood_count))
male_data <- blood_count %>%
pivot_longer(cols = male_columns,
names_to = "Test", values_to = "Values")
male_columns <- grep("_Male$", names(blood_count))
female_columns <- grep("_Female$", names(blood_count))
male_data <- blood_count %>%
pivot_longer(cols = all_of(names(blood_count)[male_columns]),
names_to = "Test", values_to = "Values")
grouped_bc <- blood_count %>%
change(Age_Group = case_when(
Age >= 20 & Age <= 29 ~ "20s",
Age >= 30 & Age <= 39 ~ "30s",
Age >= 40 & Age <= 49 ~ "40s",
Age >= 50 & Age <= 59 ~ "50s",
Age >= 60 & Age <= 70 ~ "60s")) # there were only 4 people in 70s, so I combined it with 60s
grouped_bc <- blood_count %>%
mutate(Age_Group = case_when(
Age >= 20 & Age <= 29 ~ "20s",
Age >= 30 & Age <= 39 ~ "30s",
Age >= 40 & Age <= 49 ~ "40s",
Age >= 50 & Age <= 59 ~ "50s",
Age >= 60 ~ "60s" # Including 70s as part of 60s
))
grouped_bc <- blood_count %>%
mutate(Age_Group = case_when(
age >= 20 & age <= 29 ~ "20s",
age >= 30 & age <= 39 ~ "30s",
age >= 40 & age <= 49 ~ "40s",
age >= 50 & age <= 59 ~ "50s",
age >= 60 ~ "60s" # Including 70s as part of 60s
))
head(grouped_bc)
blood_count %>%
pivot_longer(cols = 3:9, names_to = "Test", values_to = "Values") %>%
ggplot(ase(x = Age_Group, y = values, fill = Age_Group)) +
geom_boxplot() +
facet_wrap( Test, scales = "free") +  # Facet by the "Test" variable
labs(title = "Boxplot of Blood Count Tests by Age Group",
x = "Age Group",
y = "Values")
blood_count %>%
pivot_longer(cols = 3:9, names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Age_Group, y = Values, fill = Age_Group)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free") +  # Facet by the "Test" variable
labs(title = "Boxplot of Blood Count Tests by Age Group",
x = "Age Group",
y = "Values")
grouped_bc %>%
pivot_longer(cols = 3:9, names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Age_Group, y = Values, fill = Age_Group)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free") +  # Facet by the "Test" variable
labs(title = "Boxplot of Blood Count Tests by Age Group",
x = "Age Group",
y = "Values")
blood_count %>%
pivot_wider(cols = [3:9], names_to = "Test", values_to = "Values") %>%
blood_count %>%
pivot_wider(cols = 3:9, names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Gender, y = Values, fill = Gender)) +
geom_boxplot() +
facet(~ Test, scales = "free")
blood_count %>%
pivot_wider(names_from = gender, values_from = 3:9) %>%
pivot_longer(cols = -gender, names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = gender, y = Values, fill = gender)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free") +
labs(title = "Boxplot of Blood Count Tests",
x = "Gender",
y = "Values")
names(blood_count)
blood_count %>%
pivot_wider(names_from = gender, values_from = c(hemoglobin, platelet_count, white_blood_cells, red_blood_cells, mcv, mch, mchc), values_fn = list) %>%
pivot_longer(cols = -c(age), names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = gender, y = Values, fill = gender)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free") +
labs(title = "Boxplot of Blood Count Tests",
x = "Gender",
y = "Values")
blood_count %>%
pivot_wider(names_from = gender, values_from = c(hemoglobin, platelet_count, white_blood_cells, red_blood_cells, mcv, mch, mchc), values_fn = list) %>%
pivot_longer(cols = -c(age), names_to = "Test", values_to = "Values") %>%
separate(Test, into = c("Test", "Gender"), sep = "_", remove = FALSE) %>%
ggplot(aes(x = Gender, y = Values, fill = Gender)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free") +
labs(title = "Boxplot of Blood Count Tests",
x = "Gender",
y = "Values")
blood_count %>%
pivot_wider(names_from = gender, values_from = c(hemoglobin, platelet_count, white_blood_cells, red_blood_cells, mcv, mch, mchc), values_fn = list) %>%
pivot_longer(cols = -c(age), names_to = "Test", values_to = "Values") %>%
separate(Test, into = c("Test", "Gender"), sep = "_", remove = FALSE) %>%
filter(!is.na(Values)) %>%
ggplot(aes(x = Gender, y = Values, fill = Gender)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free") +
labs(title = "Boxplot of Blood Count Tests",
x = "Gender",
y = "Values")
str(blood_count)
blood_count %>%
drop_na() %>%
pivot_longer(cols = -c(age, gender), names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = gender, y = Values, fill = gender)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free") +
labs(title = "Boxplot of Blood Count Tests",
x = "Gender",
y = "Values")
