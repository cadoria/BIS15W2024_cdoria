ggmap(grizzly_map)
ggmap(grizzly_map) +
geom_point(data = grizzly, aes(longitude, latitude), size=0.4) +
labs(x= "Longitude", y= "Latitude", title="Grizzly Bears in Alaska")
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
glimpse(wolves)
View(wolves)
wolves %>%
count(pop)
lower_48 <- wolves %>%
filter(pop == "MT" | pop == "YNP" | pop == "GTNP" | pop == "MEXICAN" | pop == "SNP" | pop == "MI")
View(lower_48)
lower_48 %>%
select(lat, long) %>%
summary()
latitude <- c(33.89, 46.83)
longitude <- c(-110.99, -86.82)
bbox <- make_bbox(longitude, latitude, f = 0.03) #f is the fraction of the bounding box to add to the range, longitude first, lat second. .03 start, this number is very sensitive
wolves_map <- get_stadiamap(bbox, maptype = "terrain-lines", zoom=7) #zoom is also very sensitive
wolves_map <- get_map(wolvesbbox, maptype = "terrain-lines", source= "stamen") #zoom is also very sensitive
wolves <- read_csv("data/wolves_data/wolves_dataset.csv") %>% clean_names()
glimpse(wolves)
wolves %>%
count(pop)
lower_48 <- wolves %>%
wolves_lower48 <- filter(wolves, pop %in% c("MT", "YNP", "GTNP", "SNF", "MI"))
wolves %>%
count(pop)
lower_48 <- wolves %>%
filter(wolves, pop %in% c("MT", "YNP", "GTNP", "SNF", "MI"))
lower_48 <- wolves %>%
filter(pop %in% c("MT", "YNP", "GTNP", "SNF", "MI"))
lower_48 %>%
select(lat, long) %>%
summary()
latitude <- c(43.82, 47.75)
longitude <- c(-110.99, -86.82)
bbox <- make_bbox(longitude, latitude, f = 0.03) #f is the fraction of the bounding box to add to the range, longitude first, lat second. .03 start, this number is very sensitive
wolves_map <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=7) #zoom is also very sensitive
ggmap(wolves_map) +
geom_point(data = lower_48, aes(longitude, latitude), size=0.4) +
labs(x= "Longitude", y= "Latitude", title="Wolf Observations in Lower 48 States")
ggmap(wolves_map)
ggmap(wolves_map) +
geom_point(data = lower_48, aes(longitude, latitude), size=0.4) +
labs(x= "Longitude", y= "Latitude", title="Wolf Observations in Lower 48 States")
ggmap(grizzly_map) +
geom_point(data = grizzly, aes(long, lat), size=0.4) +
labs(x= "Longitude", y= "Latitude", title="Grizzly Bears in Alaska")
grizzly %>%
select(latitude, longitude) %>%
summary()
lat <- c(55.02, 70.37)
long <- c(-166.2, -131.3)
bbox <- make_bbox(long, lat, f = 0.03) #f is the fraction of the bounding box to add to the range, longitude first, lat second. .03 start, this number is very sensitive
grizzly_map <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=4) #zoom is also very sensitive
ggmap(grizzly_map)
ggmap(grizzly_map) +
geom_point(data = grizzly, aes(long, lat), size=0.4) +
labs(x= "Longitude", y= "Latitude", title="Grizzly Bears in Alaska")
register_stadiamaps("aff428bd-8ad7-4b69-8b6b-b34301483ba9", write = FALSE)
ggmap(grizzly_map) +
geom_point(data = grizzly, aes(long, lat), size=0.4) +
labs(x= "Longitude", y= "Latitude", title="Grizzly Bears in Alaska")
wolves <- read_csv("data/wolves_data/wolves_dataset.csv") %>% clean_names()
glimpse(wolves)
wolves %>%
count(pop)
lower_48 <- wolves %>%
filter(pop %in% c("MT", "YNP", "GTNP", "SNF", "MI"))
lower_48 %>%
select(lat, long) %>%
summary()
latitude <- c(43.82, 47.75)
longitude <- c(-110.99, -86.82)
bbox <- make_bbox(longitude, latitude, f = 0.03) #f is the fraction of the bounding box to add to the range, longitude first, lat second. .03 start, this number is very sensitive
wolves_map <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=7) #zoom is also very sensitive
ggmap(wolves_map)+
geom_point(data = lower_48, aes(longitude, latitude), size=0.5) +
labs(x= "Longitude", y= "Latitude", title="Wolf Observations in Lower 48 States")
latitude <- c(43.82, 47.75)
longitude <- c(-110.99, -86.82)
bbox_wolf <- make_bbox(longitude, latitude, f = 0.03) #f is the fraction of the bounding box to add to the range, longitude first, lat second. .03 start, this number is very sensitive
wolves_map <- get_stadiamap(bbox_wolf, maptype = "stamen_terrain", zoom=7) #zoom is also very sensitive
ggmap(wolves_map)
ggmap(wolves_map)+
geom_point(data = lower_48, aes(longitude, latitude), size=0.5) +
labs(x= "Longitude", y= "Latitude", title="Wolf Observations in Lower 48 States")
ggmap(lower_48)
map_wolves <- get_stadiamap(bbox_wolf, maptype="stamen_terrain", zoom=7)
map_wolves <- get_stadiamap(bbox_wolf, maptype = "stamen_terrain", zoom=7) #zoom is also very sensitive
wolves_map <- get_stadiamap(bbox_wolf, maptype = "stamen_terrain", zoom=7) #zoom is also very sensitive
ggmap(wolves_map)
ggmap(wolves_map)+
geom_point(data = lower_48, aes(longitude, latitude), size=0.5) +
labs(x= "Longitude", y= "Latitude", title="Wolf Observations in Lower 48 States")
grizzly %>%
select(latitude, longitude) %>%
summary()
lat <- c(55.02, 70.37)
long <- c(-166.2, -131.3)
bbox <- make_bbox(long, lat, f = 0.03) #f is the fraction of the bounding box to add to the range, longitude first, lat second. .03 start, this number is very sensitive
grizzly_map <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=4) #zoom is also very sensitive
ggmap(grizzly_map)
ggmap(grizzly_map) +
geom_point(data = grizzly, aes(long, lat), size=0.4) +
labs(x= "Longitude", y= "Latitude", title="Grizzly Bears in Alaska")
lat <- c(55.02, 70.37)
long <- c(-166.2, -131.3)
bbox_grizzly <- make_bbox(long, lat, f = 0.03) #f is the fraction of the bounding box to add to the range, longitude first, lat second. .03 start, this number is very sensitive
grizzly_map <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain", zoom=4) #zoom is also very sensitive
ggmap(grizzly_map)
ggmap(grizzly_map) +
geom_point(data = grizzly, aes(long, lat), size=0.4) +
labs(x= "Longitude", y= "Latitude", title="Grizzly Bears in Alaska")
grizzly <- read_csv("data/bear-sightings.csv") %>% clean_names()
grizzly %>%
select(latitude, longitude) %>%
summary()
grizzly_map <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain", zoom=4) #zoom is also very sensitive
lat <- c(55.02, 70.37)
long <- c(-166.2, -131.3)
bbox_grizzly <- make_bbox(long, lat, f = 0.03) #f is the fraction of the bounding box to add to the range, longitude first, lat second. .03 start, this number is very sensitive
grizzly_map <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain", zoom=4) #zoom is also very sensitive
ggmap(grizzly_map)
latitude <- c(55.02, 70.37)
longitude <- c(-166.2, -131.3)
bbox_grizzly <- make_bbox(long, lat, f = 0.03) #f is the fraction of the bounding box to add to the range, longitude first, lat second. .03 start, this number is very sensitive
grizzly %>%
select(latitude, longitude) %>%
summary()
grizzly <- read_csv("data/bear-sightings.csv") %>% clean_names()
grizzly %>%
select(latitude, longitude) %>%
summary()
latitude <- c(55.02, 70.37)
longitude <- c(-166.2, -131.3)
bbox_grizzly <- make_bbox(long, lat, f = 0.03) #f is the fraction of the bounding box to add to the range, longitude first, lat second. .03 start, this number is very sensitive
latitude <- c(55.02, 70.37)
longitude <- c(-166.2, -131.3)
bbox_grizzly <- make_bbox(longitude, latitude, f = 0.03) #f is the fraction of the bounding box to add to the range, longitude first, lat second. .03 start, this number is very sensitive
grizzly_map <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain", zoom=4) #zoom is also very sensitive
ggmap(grizzly_map)
ggmap(grizzly_map) +
geom_point(data = grizzly, aes(longitude, latitude), size=0.5) +
labs(x= "Longitude", y= "Latitude", title="Grizzly Bears in Alaska")
wolves <- read_csv("data/wolves_data/wolves_dataset.csv") %>% clean_names()
wolves %>%
count(pop)
lower_48 <- wolves %>%
filter(pop %in% c("MT", "YNP", "GTNP", "SNF", "MI"))
lower_48 %>%
select(lat, long) %>%
summary()
lat <- c(43.82, 47.75)
long <- c(-110.99, -86.82)
bbox_wolf <- make_bbox(long, lat, f = 0.03) #f is the fraction of the bounding box to add to the range, longitude first, lat second. .03 start, this number is very sensitive
wolves_map <- get_stadiamap(bbox_wolf, maptype = "stamen_terrain", zoom=7) #zoom is also very sensitive
ggmap(wolves_map)
ggmap(wolves_map)+
geom_point(data = lower_48, aes(long, lat), size=0.5) +
labs(x= "Longitude", y= "Latitude", title="Wolf Observations in Lower 48 States")
ggmap(wolves_map)+
geom_point(data = lower_48, aes(long, lat, color = pop), size=1) +
labs(x= "Longitude", y= "Latitude", title="Wolf Observations in Lower 48 States")
wolves_map <- get_stadiamap(bbox_wolf, maptype = "terrain-lines", zoom=7) #zoom is also very sensitive
wolves_map <- get_stadiamap(bbox_wolf, maptype = "stamen_terrain_lines", zoom=7) #zoom is also very sensitive
ggmap(wolves_map)
ggmap(wolves_map)+
geom_point(data = lower_48, aes(long, lat), size=0.5) +
labs(x= "Longitude", y= "Latitude", title="Wolf Observations in Lower 48 States")
ggmap(wolves_map)+
geom_point(data = lower_48, aes(long, lat), size=0.6) +
labs(x= "Longitude", y= "Latitude", title="Wolf Observations in Lower 48 States")
ggmap(wolves_map)+
geom_point(data = lower_48, aes(long, lat, color = pop), size=1) +
labs(x= "Longitude", y= "Latitude", title="Wolf Observations in Lower 48 States")
wolves_map <- get_stadiamap(bbox_wolf, maptype = "stamen_terrain_lines", zoom=9) #zoom is also very sensitive
wolves_map <- get_stadiamap(bbox_wolf, maptype = "stamen_terrain_lines", zoom=5) #zoom is also very sensitive
ggmap(wolves_map)
wolves_map <- get_stadiamap(bbox_wolf, maptype = "stamen_terrain_lines", zoom=8) #zoom is also very sensitive
ggmap(wolves_map)
ggmap(wolves_map)+
geom_point(data = lower_48, aes(long, lat), size=0.6) +
labs(x= "Longitude", y= "Latitude", title="Wolf Observations in Lower 48 States")
wolves_map <- get_stadiamap(bbox_wolf, maptype = "stamen_terrain_lines", zoom=7) #zoom is also very sensitive
ggmap(wolves_map)
ggmap(wolves_map)+
geom_point(data = lower_48, aes(long, lat), size=0.6) +
labs(x= "Longitude", y= "Latitude", title="Wolf Observations in Lower 48 States")
ggmap(wolves_map)+
geom_point(data = lower_48, aes(long, lat, color = pop), size=1) +
labs(x= "Longitude", y= "Latitude", title="Wolf Observations in Lower 48 States")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(ggmap)
register_stadiamaps("aff428bd-8ad7-4b69-8b6b-b34301483ba9", write = FALSE)
grizzly <- read_csv("data/bear-sightings.csv") %>% clean_names()
glimpse(grizzly)
grizzly %>%
select(latitude, longitude) %>%
summary()
latitude <- c(55.02, 70.37)
longitude <- c(-166.2, -131.3)
bbox_grizzly <- make_bbox(longitude, latitude, f = 0.03) #f is the fraction of the bounding box to add to the range, longitude first, lat second. .03 start, this number is very sensitive
grizzly_map <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain", zoom=4) #zoom is also very sensitive
ggmap(grizzly_map)
ggmap(grizzly_map) +
geom_point(data = grizzly, aes(longitude, latitude), size=0.5) +
labs(x= "Longitude", y= "Latitude", title="Grizzly Bears in Alaska")
wolves <- read_csv("data/wolves_data/wolves_dataset.csv") %>% clean_names()
glimpse(wolves)
wolves %>%
count(pop)
lower_48 <- wolves %>%
filter(pop %in% c("MT", "YNP", "GTNP", "SNF", "MI"))
lower_48 %>%
select(lat, long) %>%
summary()
lat <- c(43.82, 47.75)
long <- c(-110.99, -86.82)
bbox_wolf <- make_bbox(long, lat, f = 0.03) #f is the fraction of the bounding box to add to the range, longitude first, lat second. .03 start, this number is very sensitive
wolves_map <- get_stadiamap(bbox_wolf, maptype = "stamen_terrain_lines", zoom=7) #zoom is also very sensitive
ggmap(wolves_map)
ggmap(wolves_map)+
geom_point(data = lower_48, aes(long, lat), size=0.6) +
labs(x= "Longitude", y= "Latitude", title="Wolf Observations in Lower 48 States")
ggmap(wolves_map)+
geom_point(data = lower_48, aes(long, lat, color = pop), size=1) +
labs(x= "Longitude", y= "Latitude", title="Wolf Observations in Lower 48 States")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
install.packages(shiny)
library(tidyverse)
library(shiny)
library(shinydashboard)
UC_admit <- read_csv("data/UC_admit.csv")
View(UC_admit)
glimpse(UC_admit)
naniar::miss_var_summary(UC_admit)
UC_admit <- UC_admit %>%
filter(Ethnicity != "All")
names(UC_admit)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"), #bulletpoint list
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), #dropdown menu
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="peachpuff", alpha=0.50) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"), #bulletpoint list
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), #dropdown menu
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="purple", alpha=0.50) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"), #bulletpoint list
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), #dropdown menu
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="purple", alpha=0.50) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"), #bulletpoint list
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), #dropdown menu
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 9,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="purple", alpha=0.50) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"), #bulletpoint list
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), #dropdown menu
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 8,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="purple", alpha=0.50) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit$Academic_Yr <- as.factor(UC_admit$Academic_Yr)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Year and Ethnicity"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
radioButtons("y", "Select Ethnicity", choices = c("International", "Unknown", "White", "Asian", "Chicano/Latino", "American Indian", "African American"),
selected = "International")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Ethnicity==input$y & Category==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR)) +
geom_col(color="black", fill="orange", alpha=0.50) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit$Academic_Yr <- as.factor(UC_admit$Academic_Yr)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Year and Ethnicity"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
radioButtons("y", "Select Ethnicity", choices = c("International", "Unknown", "White", "Asian", "Chicano/Latino", "American Indian", "African American"),
selected = "International")
), # close the first box
box(title = "UC Admissions", width = 8,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Ethnicity==input$y & Category==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR)) +
geom_col(color="black", fill="orange", alpha=0.50) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit$Academic_Yr <- as.factor(UC_admit$Academic_Yr)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Year and Ethnicity"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
selectInput("y", "Select Ethnicity", choices = c("International", "Unknown", "White", "Asian", "Chicano/Latino", "American Indian", "African American"),
selected = "International")
), # close the first box
box(title = "UC Admissions", width = 8,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Ethnicity==input$y & Category==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR)) +
geom_col(color="black", fill="orange", alpha=0.50) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
